/*
    Курс:   Introduction
    Занятие #3
    Тема:   Преобразование типов данных и введение в операторы ветвления
*/
#include <stdio.h>
#include <stdlib.h> // для функции system
#include <time.h>   // для работы с функциями времени
#include <locale.h> // для установки локали
#pragma warning(disable: 4996)

void main()
{
    setlocale(LC_ALL, "russian"); // позволяет выводить в консоль русские символы
    /* Неявное приведение типов данных */
    // 1. При выполнении арифметических вычислений действует следующее правило: 
    //    все операнды приводятся к наибольшему типу из встретившихся
    //    Пример:
    int     ival = 3;
    double  dval = 3.14159;    
    double  dres = ival + dval; // значение переменной ival преобразуется в double: 3.0

    // 2. При присваивании значения выражения одного типа объекту другого типа
    //    результирующим является тип объекта, которому значение присваивается
    //    Пример:    
    ival = dval; // значение переменной dval преобразуется в int: 3

    // Замечание: в случае, если при преобразовании возможна потеря точности,
    // т.е. потеря данных, компилятор выдаст предупреждение, например,
    // при компиляции этого примера VisualStudio 2012 выдала вот такое предупреждение:
    // Предупреждение	1	warning C4244: =: преобразование "double" в "int", возможна потеря данных	c:\users\maxim\desktop\introductionsummer2015\lesson03\coditions\main.cpp	15	1	Coditions

    /* Явное приведение типов данных */
    // Явное преобразование необходимо подавляет проверку типов, выполняемую компилятором
    // Пример: операция деление для целочисленных переменных дает целочисленный результат
    //         явное приведение типа решает данную проблему
    int val1 = 1, val2 = 2;
    float wrong = val1/val2; // wrong содержит 0 (нуль)
    printf("wrong: %g\n", wrong);
    float good = (float)val1 / val2; // good содержит 0.5
    printf("good: %g\n", good);

    /* Оператор ветвления: оператор if  */
    // В качестве условия используются выражения с операторами срвнения:
    // == сравнение
    // >  больше
    // <  меньше
    // >= больше или равно
    // <= меньше или равно
    // != не равно    

    // Пример применения оператора ветвления 
    // Данный пример модифицированная версия программы для вывода приветственного сообщения
    // в зависимости от текущего времени суток рассмотренная на третьем занятии
    // Используются функции стандартной библиотеки, которые еще не были рассмотрены на занятиях
    time_t t = time(NULL);  // текущее время в секундах начиная с 1 января 1970 года 
    tm *lt = localtime(&t); // текущее время в виде структуры tm
    if(lt->tm_hour < 12)
    {
        printf("Доброе утро!\n");
    }
    else if(lt->tm_hour < 18)
    {
        printf("Добрый день!\n");
    }
    else
    {
        printf("Добрый вечер!\nПора на вечеринку:)\n");
    }    
   
    system("pause");
}