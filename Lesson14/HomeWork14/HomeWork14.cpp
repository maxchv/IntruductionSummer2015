// HomeWork14.cpp : Defines the entry point for the console application.
//

#include "stdafx.h"
#include <iostream>
#include <string>
#include <locale>
#include <time.h>
using namespace std;

/* 
	Задание 1.
	Предположем, что вы являетесь владельцем сетью из 5 автозаправок.
	На заправках продается топливо, которое поставляется из общего
	топлевохранилища.	
	Для марки топлива устанавливается единая цена по всем заправкам.
	Смоделировать работу сети автозаправочных станций и определить выручку для
	каждой из станции.

	Для моделирования общего топливохранилища следует использовать статические поля класса.
	Для установки цены для топлива также использовать статические поля.
	Для моделирования заправки автомобилей использовать rand()
	Выручка - поле, которое не должно быть статическим т.к. относится к каждой заправке, а не ко всем
 */

class GasStation
{
	string name;
	// объявить выручку
	// объявить вместимость топливохранилища
public:
	GasStation(char *n) { name = n; } // в конструкторе задаем название станции 
	void show()
	{
		cout << "Заправка " << name << endl;
		cout << "Выручка: " /* добавить вывод выручки */ << endl;
		cout << endl;
	}
	// моделировать заправку топливом count литров
	void fuel(int liters)
	{
		// заправить автомобиль - значит добавить выручку к этой заправке
		// и уменьшить топливо на liters литров
	}

	static bool empty() // возвращать, если заправки пустые, т.е. топлива больше нет
	{
		return true;
	}
};

void task01()
{
	// Объекты также, как и любой другой тип данных, можно хранить в массиве
	GasStation net[5] = { GasStation("Первая"), GasStation("Вторая"), GasStation("Третья"), 
						  GasStation("Четверая"), GasStation("Пятая") };
	// моделирование заправки
	while(!GasStation::empty()) // пока есть топливо
	{
		int n = rand() % 5; // выбираем станцию случайно
		int liters = rand() % 16  + 5;
		net[n].fuel(liters);
	}

	for(int i=0; i<5; i++)
	{
		net[i].show(); // Вывод информации для всех заправок
	}
}

/*
	Задание 2.
	Создать класс Ящик яблок :)
	Задать максимальную вместительность для всех ящиков 60 яблок.
	Через конструктор с параметрами задать количество яблок в данном ящике.
	Перегрузить оператор +.
	При этом следует учесть, что результатом операции будет сумма яблок двух суммируемых
	ящиков. Если яблоки помещаются в ящике (меньше или равно 60), то яблоки в суммируемых
	объектах обнуляются. т.е.
	
		Box box1(20), box2(20);
		Box box3 = box1 + box2;

	В box1 и box2 яблок уже нет, а в box3 их 40 штук.			

	Если количество яблок превышает вместимость, то оставить лишнии в исходных ящиках, например
		Box box1(20), box2(50);
		Box box3 = box1 + box2;

	В box2 яблок уже нет, в box1 осталось 10 яблок, а в box3 их 60 штук.

*/

void task02()
{
}

int _tmain(int argc, _TCHAR* argv[])
{
	srand(time(NULL));
	setlocale(LC_ALL, "russian");
	
	task01();
	task02();

	return 0;
}

